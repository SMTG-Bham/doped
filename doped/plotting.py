"""
Code to analyse VASP defect calculations.

These functions are built from a combination of useful modules from pymatgen
and AIDE (by Adam Jackson and Alex Ganose), alongside substantial modification,
in the efforts of making an efficient, user-friendly package for managing and
analysing defect calculations, with publication-quality outputs.
"""
import os
import warnings
from typing import Dict, List, Optional

import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colormaps, ticker
from pymatgen.util.string import latexify
from shakenbreak.plotting import _format_defect_name


# TODO: Lean out the options for this function (inherited from AIDE)(particularly those that can just be
#  edited by the user with the returned Matplotlib object, or with rcParams, or with a stylesheet - make
#  a specific tutorial for this in docs) -> also add kwargs option to pass to matplotlib? Useful at all?
# TODO: Add argument descriptions to docstrings
# TODO: Add option to only plot defect states that are stable at some point in the bandgap
# TODO: Add option to plot formation energies at the centroid of the chemical stability region? And make
#  this the default if no chempot_limits are specified? Or better default to plot both the most (
#  most-electronegative-)anion-rich and the (most-electropositive-)cation-rich chempot limits?
def formation_energy_plot(
    defect_phase_diagram,
    chempot_limits: Optional[Dict] = None,
    pd_facets: Optional[List] = None,
    elt_refs: Optional[Dict] = None,
    chempot_table=True,
    style_file=None,
    emphasis=False,
    xlim=None,
    ylim=None,
    fermi_level=None,
    colormap="Dark2",
    auto_labels: bool = False,
    filename: Optional[str] = None,
):
    """
    Produce a defect formation energy vs Fermi energy plot (i.e. a defect
    transition level diagram).

    Args:
        defect_phase_diagram (DefectPhaseDiagram):
             DefectPhaseDiagram object (likely created from analysis.dpd_from_defect_dict)
        chempot_limits (dict):
            This can either be a dictionary of chosen absolute/DFT chemical potentials: {Elt:
            Energy} (giving a single formation energy table - recommended to use the elt_refs
            option with this to show the formal (relative) chemical potentials in the plot) or a
            dictionary including the key-value pair: {"facets": [{'facet': [chempot_dict]}]},
            following the format generated by doped (see example notebooks). If not specified,
            chemical potentials are not included in the formation energy calculation (all set to
            zero energy).
        pd_facets (list):
            A list facet(s) / chemical potential limit(s) for which to print the defect formation
            energy tables. If not specified, will print formation energy tables for each facet in
            the phase diagram. (default: None)
        elt_refs (dict):
            Dictionary of elemental reference energies for the chemical potentials in the format:
            {Elt: ref_energy} (to determine the formal chemical potentials, when chempot_limits
            is specified as a dictionary {Elt: Energy}). Unnecessary if chempot_limits is
            provided in format generated by doped (see example notebooks).
            Default: None
        chempot_table (bool): Whether to print the chemical potential table above the plot.
            (default: True)
        style_file (str): Path to a mplstyle file to use for the plot. If None (default), uses
            the default doped style (from doped/utils/doped.mplstyle).
        emphasis (bool):
            Whether to plot the full formation energy lines for all charge states in faded grey
            (default: False)
        xlim:
            Tuple (min,max) giving the range of the x (fermi energy) axis. This may need to be
            set manually when including transition level labels, so that they don't cross the axes.
        ylim:
            Tuple (min,max) giving the range for the formation energy axis. This may need to be
            set manually when including transition level labels, so that they don't cross the axes.
        fermi_level (float):
            Fermi level to use for computing the defect formation energies. (default: 0 (i.e.
            at the VBM))
        colormap (str): Colormap to use for the plot. (default: "Dark2")
        auto_labels (bool):
            Whether to automatically label the transition levels with their charge states. (default: False)
        filename (str): Filename to save the plot to. (default: None (not saved))

    Returns:
        a matplotlib object
    """
    style_file = style_file or f"{os.path.dirname(__file__)}/utils/doped.mplstyle"
    with plt.style.context(style_file):
        if chempot_limits and "facets" in chempot_limits:
            if pd_facets is None:
                pd_facets = chempot_limits["facets"].keys()  # Phase diagram facets to use for chemical
                # potentials, to calculate and plot formation energies
            for facet in pd_facets:
                dft_chempots = chempot_limits["facets"][facet]
                elt_refs = chempot_limits["elemental_refs"]
                plot_title = facet
                plot_filename = (
                    f"{filename.rsplit('.',1)[0]}_{facet}.{filename.rsplit('.',1)[1]}"
                    if filename
                    else None
                )

                plot = _TLD_plot(
                    defect_phase_diagram,
                    dft_chempots=dft_chempots,
                    elt_refs=elt_refs,
                    chempot_table=chempot_table,
                    emphasis=emphasis,
                    xlim=xlim,
                    ylim=ylim,
                    fermi_level=fermi_level,
                    title=plot_title,
                    colormap=colormap,
                    auto_labels=auto_labels,
                    filename=plot_filename,
                )

            return plot

        # Else if you only want to give {Elt: Energy} dict for chempot_limits, or no chempot_limits
        return _TLD_plot(
            defect_phase_diagram,
            dft_chempots=chempot_limits,
            elt_refs=elt_refs,
            chempot_table=chempot_table,
            emphasis=emphasis,
            xlim=xlim,
            ylim=ylim,
            fermi_level=fermi_level,
            title=None,
            colormap=colormap,
            auto_labels=auto_labels,
            filename=filename,
        )


def _chempot_warning(dft_chempots):
    if dft_chempots is None:
        warnings.warn(
            "No chemical potentials specified, so chemical potentials are set to zero "
            "for each species. Note that this will give large errors in the absolute "
            "values of formation energies, but the transition level positions will be "
            "unaffected."
        )


def _get_plot_setup(colormap, xy):
    cmap = colormaps[colormap]
    colors = cmap(np.linspace(0, 1, len(xy)))
    if colormap == "Dark2" and len(xy) >= 8:
        warnings.warn(
            f"The chosen colormap is Dark2, which only has 8 colours, yet you have {len(xy)} "
            f"defect species (so some defects will have the same line colour). Recommended to "
            f"change/set colormap to 'tab10' or 'tab20' (10 and 20 colours each)."
        )

    # generate plot:
    plt.clf()
    styled_fig_size = plt.rcParams["figure.figsize"]
    fig, ax = plt.subplots(figsize=((2.6 / 3.5) * styled_fig_size[0], (1.95 / 3.5) * styled_fig_size[1]))
    # Gives a final figure width matching styled_fig_size, with dimensions matching the doped default
    styled_font_size = plt.rcParams["font.size"]
    styled_linewidth = plt.rcParams["lines.linewidth"]
    styled_markersize = plt.rcParams["lines.markersize"]

    return cmap, colors, fig, ax, styled_fig_size, styled_font_size, styled_linewidth, styled_markersize


def _plot_formation_energy_lines(
    xy,
    colors,
    ax,
    styled_linewidth,
    styled_markersize,
    for_legend=None,
    alpha=1.0,
):
    for cnt, def_name in enumerate(xy.keys()):  # plot formation energy lines
        ax.plot(
            xy[def_name][0],
            xy[def_name][1],
            color=colors[cnt],
            markeredgecolor=colors[cnt],
            lw=styled_linewidth * 1.2,
            markersize=styled_markersize * (4 / 6),
            alpha=alpha,
        )
        if for_legend is not None:
            for_legend.append(def_name.split("@")[0])

    return for_legend if for_legend is not None else None


def _add_band_edges_and_axis_limits(ax, band_gap, xlim, ylim, fermi_level=None):
    ax.imshow(
        [(0, 1), (0, 1)],
        cmap=plt.cm.Blues,
        extent=(xlim[0], 0, ylim[0], ylim[1]),
        vmin=0,
        vmax=3,
        interpolation="bicubic",
        rasterized=True,
        aspect="auto",
    )

    ax.imshow(
        [(1, 0), (1, 0)],
        cmap=plt.cm.Oranges,
        extent=(band_gap, xlim[1], ylim[0], ylim[1]),
        vmin=0,
        vmax=3,
        interpolation="bicubic",
        rasterized=True,
        aspect="auto",
    )

    ax.set_xlim(xlim)
    ax.plot([xlim[0], xlim[1]], [0, 0], "k-")  # black dashed line for E_formation = 0 in case ymin < 0
    ax.set_ylim(ylim)

    if fermi_level is not None:
        ax.axvline(x=fermi_level, linestyle="-.", color="k")
    ax.set_xlabel("Fermi Level (eV)")
    ax.set_ylabel("Formation Energy (eV)")
    ax.xaxis.set_major_locator(ticker.MaxNLocator(4))
    ax.xaxis.set_minor_locator(ticker.AutoMinorLocator(2))
    ax.yaxis.set_major_locator(ticker.MaxNLocator(4))
    ax.yaxis.set_minor_locator(ticker.AutoMinorLocator(2))


def _set_title_and_save_figure(ax, fig, title, chempot_table, filename, styled_font_size):
    if title:
        if chempot_table:
            ax.set_title(
                latexify(title),
                size=1.2 * styled_font_size,
                pad=28,
                fontdict={"fontweight": "bold"},
            )
        else:
            ax.set_title(latexify(title), size=styled_font_size, fontdict={"fontweight": "bold"})
    if filename is not None:
        fig.savefig(filename, bbox_inches="tight", dpi=600)


def _TLD_plot(
    defect_phase_diagram,
    dft_chempots=None,
    elt_refs=None,
    chempot_table=True,
    emphasis=False,
    xlim=None,
    ylim=None,
    fermi_level=None,
    title=None,
    colormap="Dark2",
    auto_labels=False,
    filename=None,
):
    """
    Produce defect Formation energy vs Fermi energy plot
    Args:
        dft_chempots:
            a dictionary of {Element:value} giving the chemical
            potential of each element
        xlim:
            Tuple (min,max) giving the range of the x (fermi energy) axis. This may need to be
            set manually when including transition level labels, so that they don't cross the axes.
        ylim:
            Tuple (min,max) giving the range for the formation energy axis. This may need to be
            set manually when including transition level labels, so that they don't cross the axes.

    Returns:
        a matplotlib object.
    """
    if xlim is None:
        xlim = (-0.3, defect_phase_diagram.band_gap + 0.3)
    xy = {}
    all_lines_xy = {}  # For emphasis plots with faded grey E_form lines for all charge states
    lower_cap, upper_cap = -100.0, 100.0
    y_range_vals = []  # for finding max/min values on y-axis based on x-limits

    for def_name, def_tl in defect_phase_diagram.transition_level_map.items():
        xy[def_name] = [[], []]
        if emphasis:
            all_lines_xy[def_name] = [[], []]
            for chg_ent in defect_phase_diagram.stable_entries[def_name]:
                for x_extrem in [lower_cap, upper_cap]:
                    all_lines_xy[def_name][0].append(x_extrem)
                    all_lines_xy[def_name][1].append(
                        defect_phase_diagram._formation_energy(
                            chg_ent, chemical_potentials=dft_chempots, fermi_level=x_extrem
                        )
                    )

        if def_tl:
            org_x = sorted(def_tl.keys())
            # establish lower x-bound
            first_charge = max(def_tl[org_x[0]])
            for chg_ent in defect_phase_diagram.stable_entries[def_name]:
                if chg_ent.charge_state == first_charge:
                    form_en = defect_phase_diagram._formation_energy(
                        chg_ent, chemical_potentials=dft_chempots, fermi_level=lower_cap
                    )
                    fe_left = defect_phase_diagram._formation_energy(
                        chg_ent, chemical_potentials=dft_chempots, fermi_level=xlim[0]
                    )
            xy[def_name][0].append(lower_cap)
            xy[def_name][1].append(form_en)
            y_range_vals.append(fe_left)
            # iterate over stable charge state transitions
            for fl in org_x:
                charge = max(def_tl[fl])
                for chg_ent in defect_phase_diagram.stable_entries[def_name]:
                    if chg_ent.charge_state == charge:
                        form_en = defect_phase_diagram._formation_energy(
                            chg_ent, chemical_potentials=dft_chempots, fermi_level=fl
                        )
                xy[def_name][0].append(fl)
                xy[def_name][1].append(form_en)
                y_range_vals.append(form_en)
            # establish upper x-bound
            last_charge = min(def_tl[org_x[-1]])
            for chg_ent in defect_phase_diagram.stable_entries[def_name]:
                if chg_ent.charge_state == last_charge:
                    form_en = defect_phase_diagram._formation_energy(
                        chg_ent, chemical_potentials=dft_chempots, fermi_level=upper_cap
                    )
                    fe_right = defect_phase_diagram._formation_energy(
                        chg_ent, chemical_potentials=dft_chempots, fermi_level=xlim[1]
                    )
            xy[def_name][0].append(upper_cap)
            xy[def_name][1].append(form_en)
            y_range_vals.append(fe_right)
        else:
            # no transition - just one stable charge
            chg_ent = defect_phase_diagram.stable_entries[def_name][0]
            for x_extrem in [lower_cap, upper_cap]:
                xy[def_name][0].append(x_extrem)
                xy[def_name][1].append(
                    defect_phase_diagram._formation_energy(
                        chg_ent, chemical_potentials=dft_chempots, fermi_level=x_extrem
                    )
                )
            y_range_vals.extend(
                defect_phase_diagram._formation_energy(
                    chg_ent, chemical_potentials=dft_chempots, fermi_level=x_window
                )
                for x_window in xlim
            )
    (
        cmap,
        colors,
        fig,
        ax,
        styled_fig_size,
        styled_font_size,
        styled_linewidth,
        styled_markersize,
    ) = _get_plot_setup(colormap, xy)

    for_legend = []
    for_legend = _plot_formation_energy_lines(
        xy,
        colors=colors,
        ax=ax,
        styled_linewidth=styled_linewidth,
        styled_markersize=styled_markersize,
        for_legend=for_legend,
    )  # plot formation energy lines

    # Redo for loop so grey 'all_lines_xy' not included in legend
    if emphasis:
        _legend = _plot_formation_energy_lines(
            all_lines_xy,
            colors=[(0.8, 0.8, 0.8)] * len(all_lines_xy),
            ax=ax,
            styled_linewidth=styled_linewidth,
            styled_markersize=styled_markersize,
            alpha=0.5,
        )

    # plot transition levels
    for cnt, def_name in enumerate(xy.keys()):
        x_trans, y_trans = [], []
        tl_labels = []
        tl_label_type = []
        for x_val, chargeset in defect_phase_diagram.transition_level_map[def_name].items():
            x_trans.append(x_val)
            for chg_ent in defect_phase_diagram.stable_entries[def_name]:
                if chg_ent.charge_state == chargeset[0]:
                    form_en = defect_phase_diagram._formation_energy(
                        chg_ent, chemical_potentials=dft_chempots, fermi_level=x_val
                    )
            y_trans.append(form_en)
            tl_labels.append(
                rf"$\epsilon$({max(chargeset):{'+' if max(chargeset) else ''}}/"
                f"{min(chargeset):{'+' if min(chargeset) else ''}})"
            )
            tl_label_type.append("start_positive" if max(chargeset) > 0 else "end_negative")
        if x_trans:
            ax.plot(
                x_trans,
                y_trans,
                marker="o",
                color=colors[cnt],
                markeredgecolor=colors[cnt],
                lw=styled_linewidth * 1.2,
                markersize=styled_markersize * (4 / 6),
                fillstyle="full",
            )
            if auto_labels:
                for index, coords in enumerate(zip(x_trans, y_trans)):
                    text_alignment = "right" if tl_label_type[index] == "start_positive" else "left"
                    ax.annotate(
                        tl_labels[index],  # this is the text
                        coords,  # this is the point to label
                        textcoords="offset points",  # how to position the text
                        xytext=(0, 5),  # distance from text to points (x,y)
                        ha=text_alignment,  # horizontal alignment of text
                        size=styled_font_size * 0.9,
                        annotation_clip=True,
                    )  # only show label if coords in current axes

    # get latex-like legend titles
    legends_txt = []
    for defect_entry_name in for_legend:
        try:
            defect_name = (
                _format_defect_name(
                    defect_species=defect_entry_name,
                    include_site_num_in_name=False,
                ).rsplit("^", 1)[0]
                + "$"
            )  # exclude charge  # Format defect name for title and axis labels
        except Exception:  # if formatting fails, just use the defect_species name
            defect_name = defect_entry_name

        # add subscript labels for different configurations of same defect species
        if defect_name in legends_txt:
            defect_name = (
                _format_defect_name(
                    defect_species=defect_entry_name,
                    include_site_num_in_name=True,
                ).rsplit("^", 1)[0]
                + "$"
            )  # exclude charge
        if defect_name in legends_txt:
            i = 1
            while defect_name in legends_txt:
                i += 1
                defect_name = f"{defect_name[:-3]}{chr(96+i)}{defect_name[-3:]}"  # a, b c etc
        legends_txt.append(defect_name)
    ax.legend(
        legends_txt,
        loc=2,
        bbox_to_anchor=(1, 1),
    )

    if ylim is None:
        window = max(y_range_vals) - min(y_range_vals)
        spacer = 0.1 * window
        ylim = (0, max(y_range_vals) + spacer)
        if auto_labels:  # need to manually set xlim or ylim if labels cross axes!!
            ylim = (0, max(y_range_vals) * 1.17) if spacer / ylim[1] < 0.145 else ylim
            # Increase y_limit to give space for transition level labels

    _add_band_edges_and_axis_limits(
        ax, defect_phase_diagram.band_gap, xlim, ylim, fermi_level=fermi_level
    )  # Show colourful band edges
    if chempot_table and dft_chempots:
        _plot_chemical_potential_table(ax, dft_chempots, loc="left", elt_refs=elt_refs)

    _set_title_and_save_figure(ax, fig, title, chempot_table, filename, styled_font_size)

    return fig


def _plot_chemical_potential_table(
    ax,
    dft_chempots,
    loc="left",
    elt_refs=None,
):
    if elt_refs is not None:
        dft_chempots = {elt: energy - elt_refs[elt] for elt, energy in dft_chempots.items()}
    labels = [rf"$\mathregular{{\mu_{{{s}}}}}$," for s in sorted(dft_chempots.keys())]
    labels[0] = f"({labels[0]}"
    labels[-1] = f"{labels[-1][:-1]})"  # [:-1] removes trailing comma
    labels = ["Chemical Potentials", *labels, " Units:"]

    text_list = [f"{dft_chempots[el]:.2f}," for el in sorted(dft_chempots.keys())]

    # add brackets to first and last entries:
    text_list[0] = f"({text_list[0]}"
    text_list[-1] = f"{text_list[-1][:-1]})"  # [:-1] removes trailing comma
    if elt_refs is not None:
        text_list = ["(wrt Elemental refs)", *text_list, "  [eV]"]
    else:
        text_list = ["(from calculations)", *text_list, "  [eV]"]
    widths = [0.1] + [0.9 / len(dft_chempots)] * (len(dft_chempots) + 2)
    tab = ax.table(cellText=[text_list], colLabels=labels, colWidths=widths, loc="top", cellLoc=loc)
    tab.auto_set_column_width(list(range(len(widths))))

    for cell in tab.get_celld().values():
        cell.set_linewidth(0)

    return tab


def all_lines_formation_energy_plot(  # TODO: Refactor this as an options for formation_energy_plot
    defect_phase_diagram,
    chempot_limits: Optional[Dict] = None,
    pd_facets: Optional[List] = None,
    elt_refs: Optional[Dict] = None,
    chempot_table=True,
    xlim=None,
    ylim=None,
    fermi_level=None,
    title=None,
    colormap="Dark2",
    auto_labels: bool = False,
    filename: Optional[str] = None,
):
    """
    Produce a defect formation energy vs Fermi energy plot (i.e. a defect
    transition level diagram), showing the full formation energy lines for all
    defect species present.

    Args:
        defect_phase_diagram (DefectPhaseDiagram):
             DefectPhaseDiagram object (likely created from analysis.dpd_from_defect_dict)
        chempot_limits (dict):
            This can either be a dictionary of chosen absolute/DFT chemical potentials: {Elt:
            Energy} (giving a single formation energy table - recommended to use the elt_refs
            option with this to show the formal (relative) chemical potentials in the plot) or a
            dictionary including the key-value pair: {"facets": [{'facet': [chempot_dict]}]},
            following the format generated by doped: cpa.read_phase_diagram_and_chempots() (see
            example notebooks). If not specified, chemical potentials are not included in the
            formation energy calculation (all set to zero energy).
        pd_facets (list):
            A list facet(s) / chemical potential limit(s) for which to print the defect formation
            energy tables. If not specified, will print formation energy tables for each facet in
            the phase diagram. (default: None)
        elt_refs (dict):
            Dictionary of elemental reference energies for the chemical potentials in the format:
            {Elt: ref_energy} (to determine the formal chemical potentials, when chempot_limits
            is specified as a dictionary {Elt: Energy}). Unnecessary if chempot_limits is
            provided in format generated by doped: cpa.read_phase_diagram_and_chempots() (see
            example notebooks).
            Default: None
        chempot_table (bool): Whether to print the chemical potential table above the plot. (default: True)
        emphasis (bool):
            Whether to plot the full formation energy lines for all charge states in faded grey
            (default: False)
        xlim:
            Tuple (min,max) giving the range of the x (fermi energy) axis. This may need to be
            set manually when including transition level labels, so that they don't cross the axes.
        ylim:
            Tuple (min,max) giving the range for the formation energy axis. This may need to be
            set manually when including transition level labels, so that they don't cross the axes.
        fermi_level (float):
            Fermi level to use for computing the defect formation energies. (default: 0 (i.e.
            at the VBM))
        title (str): Title for the plot. (default: None)
        colormap (str): Colormap to use for the plot. (default: "Dark2")
        auto_labels (bool):
            Whether to automatically label the transition levels with their charge states. (default: False)
        filename (str): Filename to save the plot to. (default: None)

    Returns:
        a matplotlib object
    """
    if not chempot_limits or "facets" not in chempot_limits:
        # If you only want to give {Elt: Energy} dict for chempot_limits, or no chempot_limits
        return _all_entries_TLD_plot(
            defect_phase_diagram,
            dft_chempots=chempot_limits,
            elt_refs=elt_refs,
            xlim=xlim,
            ylim=ylim,
            fermi_level=fermi_level,
            title=title,
            colormap=colormap,
            chempot_table=chempot_table,
            auto_labels=auto_labels,
            filename=filename,
        )
    if pd_facets is None:
        pd_facets = chempot_limits["facets"].keys()  # Phase diagram facets to use for chemical
        # potentials, to calculate and plot formation energies
    for facet in pd_facets:
        dft_chempots = chempot_limits["facets"][facet]
        elt_refs = chempot_limits["elemental_refs"]
        if title:
            plot_title = title
            if filename is None:
                filename = f"{plot_title}_{facet}.pdf"
        else:
            plot_title = facet

        return _all_entries_TLD_plot(
            defect_phase_diagram,
            dft_chempots=dft_chempots,
            elt_refs=elt_refs,
            xlim=xlim,
            ylim=ylim,
            fermi_level=fermi_level,
            title=plot_title,
            colormap=colormap,
            chempot_table=chempot_table,
            auto_labels=auto_labels,
            filename=filename,
        )
    return None


def _all_entries_TLD_plot(
    defect_phase_diagram,
    dft_chempots=None,
    elt_refs=None,
    chempot_table=True,
    xlim=None,
    ylim=None,
    fermi_level=None,
    title=None,
    colormap="Dark2",
    auto_labels=False,
    filename=None,
):
    """
    Produce defect Formation energy vs Fermi energy plot
    Args:
        dft_chempots:
            a dictionary of {Element:value} giving the chemical potential of each element
        xlim:
            Tuple (min,max) giving the range of the x (fermi energy) axis. This may need to be
            set manually when including transition level labels, so that they don't cross the axes.
        ylim:
            Tuple (min,max) giving the range for the formation energy axis. This may need to be
            set manually when including transition level labels, so that they don't cross the axes.

    Returns:
        a matplotlib object.
    """
    if xlim is None:
        xlim = (-0.3, defect_phase_diagram.band_gap + 0.3)
    xy = {}
    lower_cap, upper_cap = -100.0, 100.0
    y_range_vals = []  # for finding max/min values on y-axis based on x-limits

    legends_txt = []
    for defect_entry in defect_phase_diagram.entries:
        try:
            defect_name = _format_defect_name(
                defect_species=defect_entry.name,
                include_site_num_in_name=False,
            )  # Format defect name for title and axis labels
        except Exception:  # if formatting fails, just use the defect_species name
            defect_name = defect_entry.name

        # add subscript labels for different configurations of same defect species
        if defect_name in legends_txt:
            defect_name = _format_defect_name(
                defect_species=defect_entry.name,
                include_site_num_in_name=True,
            )
        if defect_name in legends_txt:
            i = 1
            while defect_name in legends_txt:
                i += 1
                defect_name = f"{defect_name[:-3]}{chr(96 + i)}{defect_name[-3:]}"
        legends_txt.append(defect_name)
        xy[defect_name] = [[], []]
        for x_extrem in [lower_cap, upper_cap]:
            xy[defect_name][0].append(x_extrem)
            xy[defect_name][1].append(
                defect_phase_diagram._formation_energy(
                    defect_entry, chemical_potentials=dft_chempots, fermi_level=x_extrem
                )
            )
        y_range_vals.extend(
            defect_phase_diagram._formation_energy(
                defect_entry, chemical_potentials=dft_chempots, fermi_level=x_window
            )
            for x_window in xlim
        )

    (
        cmap,
        colors,
        fig,
        ax,
        styled_fig_size,
        styled_font_size,
        styled_linewidth,
        styled_markersize,
    ) = _get_plot_setup(colormap, xy)

    ax.legend(
        legends_txt,
        loc=2,
        bbox_to_anchor=(1, 1),
    )

    _plot_formation_energy_lines(  # plot formation energy lines
        xy,
        colors=colors,
        ax=ax,
        styled_linewidth=styled_linewidth,
        styled_markersize=styled_markersize,
    )

    if ylim is None:
        window = max(y_range_vals) - min(y_range_vals)
        spacer = 0.1 * window
        ylim = (0, max(y_range_vals) + spacer)
        if auto_labels:  # need to manually set xlim or ylim if labels cross axes!!
            ylim = (0, max(y_range_vals) * 1.17) if spacer / ylim[1] < 0.145 else ylim
            # Increase y_limit to give space for transition level labels

    _add_band_edges_and_axis_limits(
        ax, defect_phase_diagram.band_gap, xlim, ylim, fermi_level=fermi_level
    )  # Show colourful band edges
    if chempot_table and dft_chempots:
        _plot_chemical_potential_table(ax, dft_chempots, loc="left", elt_refs=elt_refs)

    _set_title_and_save_figure(ax, fig, title, chempot_table, filename, styled_font_size)

    return fig
