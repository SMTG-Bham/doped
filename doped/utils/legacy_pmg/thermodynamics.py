"""
Code for analysing the thermodynamics of defect formation in solids, including
calculation of formation energies as functions of Fermi level and chemical
potentials.

This code for calculating defect formation energies was originally templated
from the pyCDT (pymatgen<=2022.7.25) DefectThermodynamics code (deleted in
later versions), before heavy modification to work with doped DefectEntry
objects and add additional functionality.
"""
import os
import warnings
from itertools import chain
from typing import Dict, List, Optional, Tuple, Union

import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from monty.json import MSONable
from monty.serialization import dumpfn, loadfn
from pymatgen.core.periodic_table import Element
from scipy.spatial import HalfspaceIntersection

from doped.core import DefectEntry
from doped.generation import _sort_defect_entries
from doped.utils.plotting import _TLD_plot

# TODO: Cleanup and refactor this code
# TODO: Need to set the str and repr functions for the final form of our DefectThermodynamics to give an
#  informative output!
# TODO: Previous `pymatgen` issues, fixed?
#   - Currently the `PointDefectComparator` object from `pymatgen.analysis.defects.thermodynamics` is
#     used to group defect charge states for the transition level plot / transition level map outputs.
#     For interstitials, if the closest Voronoi site from the relaxed structure thus differs significantly
#     between charge states, this will give separate lines for each charge state. This is kind of ok,
#     because they _are_ actually different defect sites, but should have intelligent defaults for dealing
#     with this (see `TODO` in `thermo_from_defect_dict` in `analysis.py`; at least similar colours for
#     similar defect types, an option to just show amalgamated lowest energy charge states for each
#     _defect type_). NaP is an example for this - should have a test built for however we want to handle
#     cases like this. See Ke's example case too with different interstitial sites.
#   - GitHub issue related to `DefectThermodynamics`: https://github.com/SMTG-Bham/doped/issues/3 -> Think
#     about how we want to refactor the `DefectThermodynamics` object!
#   - Note that if you edit the entries in a DefectThermodynamics after creating it, you need to
#     `thermo.find_stable_charges()` to update the transition level map etc.

# TODO: Add `from_defect_dict` as method here as well, as `get_defect_thermodynamics()`


class DefectThermodynamics(MSONable):
    """
    Class for analysing the calculated thermodynamics of defects in solids.
    Similar to a pymatgen PhaseDiagram object, having the ability to quickly
    analyse defect formation energies when fed DefectEntry objects.

    This class is able to get:
        a) stability of charge states for a given defect,
        b) list of all formation energies,
        c) transition levels in the gap,
        d) used as input to doped plotting/analysis functions
    """

    def __init__(
        self,
        entries: List[DefectEntry],
        chempots: Optional[Dict] = None,
        el_refs: Optional[Dict] = None,
        vbm: Optional[float] = None,
        band_gap: Optional[float] = None,
    ):
        """
        Create a DefectThermodynamics object, which can be used to analyse the
        calculated thermodynamics of defects in solids.

        Direct initiation with DefectThermodynamics() is typically not recommended.
        Rather DefectsParser.get_defect_thermodynamics() or
        DefectThermodynamics.from_defect_dict() as shown in the doped parsing tutorials.


        Args:
            entries ([DefectEntry]):
                A list of DefectEntry objects. Note that `DefectEntry.name` attributes
                 are used for grouping and plotting purposes! These should end be in
                 the format "{defect_name}_{optional_site_info}_{charge_state}". If
                 the DefectEntry.name attribute is not defined or does not end with
                 the charge state, then the entry will be renamed with the doped
                 default name.
            chempots (dict):
                Dictionary of chemical potentials to use for calculating the defect
                formation energies. This can have the form of
                {"facets": [{'facet': [chempot_dict]}]} (the format generated by
                doped's chemical potential parsing functions (see tutorials)) which
                allows easy analysis over a range of chemical potentials - where facet(s)
                (chemical potential limit(s)) to analyse/plot can later be chosen using
                the `facets` argument.
                Alternatively this can be a dictionary of **DFT**/absolute chemical
                potentials (not formal chemical potentials!) for a single facet (limit),
                in the format: {element symbol: chemical potential} - if manually
                specifying chemical potentials this way, you can set the `el_refs` option
                with the DFT reference energies of the elemental phases in order to show
                the formal (relative) chemical potentials above the formation energy
                plot.
                If None (default), sets all chemical potentials to zero. Chemical
                potentials can also be supplied later in each analysis function.
                (Default: None)
            el_refs (dict):
                Dictionary of elemental reference energies for the chemical potentials
                in the format:
                {element symbol: reference energy} (to determine the formal chemical
                potentials, when chempots has been manually specified as
                {element symbol: chemical potential}). Unnecessary if chempots is
                provided in format generated by doped (see tutorials).
                (Default: None)
            vbm (float):
                VBM energy to use as Fermi level reference point for analysis.
                If None (default), will use "vbm" from the calculation_metadata
                dict attributes of the DefectEntry objects in `entries`.
            band_gap (float):
                Band gap of the host, to use for analysis.
                If None (default), will use "gap" from the calculation_metadata
                dict attributes of the DefectEntry objects in `entries`.
        """
        # TODO: Update plot to pull chempots from attributes now, if None. Should have this behaviour for
        # defect_thermo methods, where chempots can be supplied as input parameter, or otherwise will use
        # saved chempots (and can specify facet)
        self.entries = entries
        self.chempots, self.el_refs = self._parse_chempots(chempots, el_refs)

        # get and check VBM/bandgap values:
        def _raise_VBM_bandgap_value_error(vals, type="VBM"):
            raise ValueError(
                f"{type} values for defects in `defect_dict` do not match within 0.05 eV of each other, "
                f"and so are incompatible for thermodynamic analysis with DefectThermodynamics. The "
                f"{type} values in the dictionary are: {vals}. You should recheck the correct/same bulk "
                f"files were used when parsing. If this is acceptable, you can instead manually specify "
                f"{type} in DefectThermodynamics initialisation."
            )

        self.vbm = vbm
        self.band_gap = band_gap
        if self.vbm is None or self.band_gap is None:
            vbm_vals = []
            bandgap_vals = []
            for defect_entry in self.entries:
                if "vbm" in defect_entry.calculation_metadata:
                    vbm_vals.append(defect_entry.calculation_metadata["vbm"])
                if "gap" in defect_entry.calculation_metadata:
                    bandgap_vals.append(defect_entry.calculation_metadata["gap"])

            # get the max difference in VBM & bandgap vals:
            if max(vbm_vals) - min(vbm_vals) > 0.05 and self.vbm is None:
                _raise_VBM_bandgap_value_error(vbm_vals, type="VBM")
            elif self.vbm is None:
                self.vbm = vbm_vals[0]

            if max(bandgap_vals) - min(bandgap_vals) > 0.05 and self.band_gap is None:
                _raise_VBM_bandgap_value_error(bandgap_vals, type="bandgap")
            elif self.band_gap is None:
                self.band_gap = bandgap_vals[0]

        # order entries for deterministic behaviour (particularly for plotting)
        entries_dict = {entry.name: entry for entry in self.entries}
        sorted_entries_dict = _sort_defect_entries(entries_dict)
        self.entries = list(sorted_entries_dict.values())
        self.find_stable_charges()

    def _parse_chempots(self, chempots: Optional[Dict] = None, el_refs: Optional[Dict] = None):
        """
        Parse the chemical potentials input to the DefectThermodynamics object,
        formatting them in the doped format for use in analysis functions.

        Can be either doped format or user-specified format.

        Returns parsed chempots and el_refs
        """
        if chempots is None:
            return None, None

        if "facets" in chempots:  # doped format, use as is and get el_refs
            return chempots, chempots.get("elemental_refs")

        # otherwise user-specified format, convert to doped format
        # TODO: Add catch later, that if no chempot is set for an element, warn user and set to 0
        chempots = {"facets": {"User Chemical Potentials": chempots}}
        if el_refs is not None:
            chempots["elemental_refs"] = el_refs
            chempots["facets_wrt_el_refs"] = {
                "User Chemical Potentials": {el: chempot - el_refs[el] for el, chempot in chempots.items()}
            }
        return chempots, el_refs

    def as_dict(self):
        """
        Returns:
            JSON-serializable dict representation of DefectThermodynamics.
        """
        return {
            "@module": type(self).__module__,
            "@class": type(self).__name__,
            "entries": [entry.as_dict() for entry in self.entries],
            "chempots": self.chempots,
            "el_refs": self.el_refs,
            "vbm": self.vbm,
            "band_gap": self.band_gap,
        }

    @classmethod
    def from_dict(cls, d):
        """
        Reconstitute a DefectThermodynamics object from a dict representation
        created using as_dict().

        Args:
            d (dict): dict representation of DefectThermodynamics.

        Returns:
            DefectThermodynamics object
        """
        warnings.filterwarnings(
            "ignore", "Use of properties is"
        )  # `message` only needs to match start of message
        entries = [DefectEntry.from_dict(entry_dict) for entry_dict in d.get("entries")]

        return cls(
            entries,
            chempots=d.get(
                "chempots"
            ),  # TODO: Check if this works in each case, may need to be refactored
            el_refs=d.get("el_refs"),
            vbm=d.get("vbm"),
            band_gap=d.get("band_gap"),
        )

    def to_json(self, filename: Optional[str] = None):
        """
        Save the DefectThermodynamics object as a json file, which can be
        reloaded with the DefectThermodynamics.from_json() class method.

        Args:
            filename (str): Filename to save json file as. If None, the filename will be
                set as "{Chemical Formula}_defect_thermodynamics.json" where
                {Chemical Formula} is the chemical formula of the host material.
        """
        if filename is None:
            bulk_entry = self.entries[0].bulk_entry
            if bulk_entry is not None:
                formula = bulk_entry.structure.composition.get_reduced_formula_and_factor(
                    iupac_ordering=True
                )[0]
                filename = f"{formula}_defect_thermodynamics.json"
            else:
                filename = "defect_thermodynamics.json"

        dumpfn(self, filename)

    @classmethod
    def from_json(cls, filename: str):
        """
        Load a DefectThermodynamics object from a json file.

        Args:
            filename (str): Filename of json file to load DefectThermodynamics
            object from.

        Returns:
            DefectThermodynamics object
        """
        return loadfn(filename)

    def _get_chempot_term(self, defect_entry, chemical_potentials=None):
        chemical_potentials = chemical_potentials or {}

        return sum(
            chem_pot * -defect_entry.defect.element_changes[Element(el)]
            for el, chem_pot in chemical_potentials.items()
            if Element(el) in defect_entry.defect.element_changes
        )

    def _formation_energy(self, defect_entry, chemical_potentials=None, fermi_level=0):
        """
        Compute the formation energy for a defect taking into account a given
        chemical potential and fermi_level.

        Args:
             defect_entry (DefectEntry): DefectEntry object to compute formation energy for.
             chemical_potentials (dict): Dictionary of elemental chemical potential values.
                Keys are Element objects within the defect structure's composition.
                Values are float numbers equal to the atomic chemical potential for that element.
             fermi_level (float):  Value corresponding to the electron chemical potential,
                referenced to the VBM. The VBM value is taken from the calculation_metadata dict
                attribute if present, otherwise self.vbm.

        Returns:
            Formation energy value (float)
        """
        chempot_correction = self._get_chempot_term(defect_entry, chemical_potentials)

        formation_energy = defect_entry.get_ediff() + chempot_correction

        if "vbm" in defect_entry.calculation_metadata:
            formation_energy += defect_entry.charge_state * (
                defect_entry.calculation_metadata["vbm"] + fermi_level
            )
        else:
            formation_energy += defect_entry.charge_state * (self.vbm + fermi_level)

        return formation_energy

    def find_stable_charges(self):
        """
        Sets the stable charges and transition states for a series of defect
        entries. Defect entries are grouped together based on their
        DefectEntry.name attributes. These should end be in the format
        "{defect_name}_{optional_site_info}_{charge_state}". If the
        DefectEntry.name attribute is not defined or does not end with the
        charge state, then the entry will be renamed with the doped default
        name.

        This function uses scipy's HalfspaceIntersection
        to construct the polygons corresponding to defect stability as
        a function of the Fermi-level. The Halfspace Intersection
        constructs N-dimensional hyperplanes, in this case N=2,  based
        on the equation of defect formation energy with considering chemical
        potentials:
            E_form = E_0^{Corrected} + Q_{defect}*(E_{VBM} + E_{Fermi}).

        Extra hyperplanes are constructed to bound this space so that
        the algorithm can actually find enclosed region.

        This code was modeled after the Halfspace Intersection code for
        the Pourbaix Diagram
        """
        # Old pymatgen defect-matching code: # TODO: Reconsider this approach. For now, we group based
        #  on defect entry names (which themselves should contain the information on inequivalent (
        #  initial) defect sites). Could match based on the entry.defect objects as was done before,
        #  if we had a reliable way of parsing these (but in a far more efficient way than before,
        #  just checking that the structure and site are the same rather than the old,
        #  slow PointDefectComparator; Bonan did this via hashing to avoid the old approach (see
        #  archived branch, but I think with updated comparisons this is unnecessary).
        # TODO: Should have an adjustable site-displacement tolerance for matching and grouping entries?
        #  Along with option to just group all defects of the same type and only show the lowest energy
        #  state (equivalent to setting this displacement tolerance to infinity).
        # def similar_defects(entryset):
        #     """
        #     Used for grouping similar defects of different charges
        #     Can distinguish identical defects even if they are not
        #     in same position.
        #     """
        #     pdc = PointDefectComparator(
        #         check_charge=False, check_primitive_cell=True, check_lattice_scale=False
        #     )
        #     grp_def_sets = []
        #     grp_def_indices = []
        #     for ent_ind, ent in enumerate(entryset):
        #         # TODO: more pythonic way of grouping entry sets with PointDefectComparator.
        #         # this is currently most time intensive part of DefectThermodynamics
        #         matched_ind = None
        #         for grp_ind, defgrp in enumerate(grp_def_sets):
        #             if pdc.are_equal(ent.defect, defgrp[0].defect):
        #                 matched_ind = grp_ind
        #                 break
        #         if matched_ind is not None:
        #             grp_def_sets[matched_ind].append(copy.deepcopy(ent))
        #             grp_def_indices[matched_ind].append(ent_ind)
        #         else:
        #             grp_def_sets.append([copy.deepcopy(ent)])
        #             grp_def_indices.append([ent_ind])
        #
        #     return zip(grp_def_sets, grp_def_indices)

        def similar_defects(entryset):
            """
            Group defects based on their DefectEntry.name attributes. Defect
            entries are grouped together based on their DefectEntry.name attributes.
            These should end be in the format:
            "{defect_name}_{optional_site_info}_{charge_state}". If the
            DefectEntry.name attribute is not defined or does not end with the
            charge state, then the entry will be renamed with the doped default name.

            For example, 'defect_A_1' and 'defect_A_2' will be grouped together.
            """
            from doped.analysis import check_and_set_defect_entry_name

            # Dictionary to hold groups of entries with the same prefix
            grouped_entries = {}

            for ent_ind, ent in enumerate(entryset):
                # check defect entry name and (re)define if necessary
                check_and_set_defect_entry_name(ent, ent.name)

                entry_name_wout_charge = ent.name.rsplit("_", 1)[0]

                # If the prefix is not yet in the dictionary, initialize it with empty lists
                if entry_name_wout_charge not in grouped_entries:
                    grouped_entries[entry_name_wout_charge] = {"entries": [], "indices": []}

                # Append the current entry and its index to the appropriate group
                grouped_entries[entry_name_wout_charge]["entries"].append(ent)
                grouped_entries[entry_name_wout_charge]["indices"].append(ent_ind)

            # Convert the dictionary to the desired output format
            return [(group["entries"], group["indices"]) for group in grouped_entries.values()]

        # Limits for search
        # E_fermi = { -1 eV to band gap+1}
        # E_formation = { (min(Eform) - 30) to (max(Eform) + 30)}
        all_eform = [
            self._formation_energy(one_def, fermi_level=self.band_gap / 2.0) for one_def in self.entries
        ]
        min_y_lim = min(all_eform) - 30
        max_y_lim = max(all_eform) + 30
        limits = [[-1, self.band_gap + 1], [min_y_lim, max_y_lim]]

        stable_entries = {}
        finished_charges = {}
        transition_level_map = {}

        # Grouping by defect types
        for defects, index_list in similar_defects(self.entries):
            # prepping coefficient matrix for half-space intersection
            # [-Q, 1, -1*(E_form+Q*VBM)] -> -Q*E_fermi+E+-1*(E_form+Q*VBM) <= 0 where E_fermi and E are
            # the variables in the hyperplanes
            hyperplanes = np.array(
                [
                    [
                        -1.0 * entry.charge_state,
                        1,
                        -1.0 * (entry.get_ediff() + entry.charge_state * self.vbm),
                    ]
                    for entry in defects
                ]
            )

            border_hyperplanes = [
                [-1, 0, limits[0][0]],
                [1, 0, -1 * limits[0][1]],
                [0, -1, limits[1][0]],
                [0, 1, -1 * limits[1][1]],
            ]
            hs_hyperplanes = np.vstack([hyperplanes, border_hyperplanes])

            interior_point = [self.band_gap / 2, min(all_eform) - 1.0]

            hs_ints = HalfspaceIntersection(hs_hyperplanes, np.array(interior_point))

            # Group the intersections and corresponding facets
            ints_and_facets = zip(hs_ints.intersections, hs_ints.dual_facets)
            # Only include the facets corresponding to entries, not the boundaries
            total_entries = len(defects)
            ints_and_facets = filter(
                lambda int_and_facet: all(np.array(int_and_facet[1]) < total_entries),
                ints_and_facets,
            )
            # sort based on transition level
            ints_and_facets = sorted(ints_and_facets, key=lambda int_and_facet: int_and_facet[0][0])

            # log a defect name for tracking (using full index list to avoid naming
            # in-equivalent defects with same name)
            str_index_list = [str(ind) for ind in sorted(index_list)]
            track_name = f"{defects[0].name}@" + "-".join(str_index_list)  # TODO: Needs to be
            # consistent with plotting

            if len(ints_and_facets) > 0:
                # Unpack into lists
                _, facets = zip(*ints_and_facets)
                # Map of transition level: charge states

                transition_level_map[track_name] = {
                    intersection[0]: [defects[i].charge_state for i in facet]
                    for intersection, facet in ints_and_facets
                }

                stable_entries[track_name] = [defects[i] for dual in facets for i in dual]

                finished_charges[track_name] = [defect.charge_state for defect in defects]
            else:
                # if ints_and_facets is empty, then there is likely only one defect...
                if len(defects) != 1:
                    # confirm formation energies dominant for one defect over other identical defects
                    name_set = [f"{one_def.name}_chg{str(one_def.charge_state)}" for one_def in defects]
                    vb_list = [
                        self._formation_energy(one_def, fermi_level=limits[0][0]) for one_def in defects
                    ]
                    cb_list = [
                        self._formation_energy(one_def, fermi_level=limits[0][1]) for one_def in defects
                    ]

                    vbm_def_index = vb_list.index(min(vb_list))
                    name_stable_below_vbm = name_set[vbm_def_index]
                    cbm_def_index = cb_list.index(min(cb_list))
                    name_stable_above_cbm = name_set[cbm_def_index]

                    if name_stable_below_vbm != name_stable_above_cbm:
                        raise ValueError(
                            f"HalfSpace identified only one stable charge out of list: {name_set}\n"
                            f"But {name_stable_below_vbm} is stable below vbm and "
                            f"{name_stable_above_cbm} is stable above cbm.\nList of VBM formation "
                            f"energies: {vb_list}\nList of CBM formation energies: {cb_list}"
                        )
                    # logger.info(f"{name_stable_below_vbm} is only stable defect out of {name_set}")
                    transition_level_map[track_name] = {}
                    stable_entries[track_name] = [defects[vbm_def_index]]
                    finished_charges[track_name] = [one_def.charge_state for one_def in defects]
                else:
                    transition_level_map[track_name] = {}

                    stable_entries[track_name] = [defects[0]]

                    finished_charges[track_name] = [defects[0].charge_state]

        self.transition_level_map = transition_level_map
        self.transition_levels = {
            defect_name: list(defect_tls.keys())
            for defect_name, defect_tls in transition_level_map.items()
        }
        self.stable_entries = stable_entries
        self.finished_charges = finished_charges
        self.stable_charges = {
            defect_name: [entry.charge_state for entry in entries]
            for defect_name, entries in stable_entries.items()
        }

    @property
    def defect_types(self):
        """
        List types of defects existing in the DefectThermodynamics.
        """
        return list(self.finished_charges.keys())

    @property
    def all_stable_entries(self):
        """
        List all stable entries (defect+charge) in the DefectThermodynamics.
        """
        return list(chain.from_iterable(self.stable_entries.values()))

    @property
    def all_unstable_entries(self):
        """
        List all unstable entries (defect+charge) in the DefectThermodynamics.
        """
        all_stable_entries = self.all_stable_entries
        return [e for e in self.entries if e not in all_stable_entries]

    # Doesn't work as .defect_concentration() no longer a DefectEntry method, but can be done with
    # pmg-analysis-defects FormationEnergyDiagram (or py-sc-fermi ofc)
    # def defect_concentrations(self, chemical_potentials, temperature=300, fermi_level=0.0):
    #     """
    #     Give list of all concentrations at specified efermi in the DefectThermodynamics
    #     args:
    #         chemical_potentials = {Element: number} is dict of chemical potentials to provide formation
    #             energies for temperature = temperature to produce concentrations from
    #         fermi_level: (float) is fermi level relative to valence band maximum
    #             Default efermi = 0 = VBM energy
    #     returns:
    #         list of dictionaries of defect concentrations.
    #     """
    #     return [
    #         {
    #             "conc": dfct.defect_concentration(
    #                 chemical_potentials=chemical_potentials,
    #                 temperature=temperature,
    #                 fermi_level=fermi_level,
    #             ),
    #             "name": dfct.name,
    #             "charge": dfct.charge_state,
    #         }
    #         for dfct in self.all_stable_entries
    #     ]

    # Doesn't work as .defect_concentration() no longer a DefectEntry method (required in this code),
    # but can be done with pmg-analysis-defects MultiFormationEnergyDiagram (or py-sc-fermi ofc)
    # def solve_for_fermi_energy(self, temperature, chemical_potentials, bulk_dos):
    #     """
    #     Solve for the Fermi energy self-consistently as a function of T
    #     Observations are Defect concentrations, electron and hole conc
    #     Args:
    #         temperature: Temperature to equilibrate fermi energies for
    #         chemical_potentials: dict of chemical potentials to use for calculation fermi level
    #         bulk_dos: bulk system dos (pymatgen Dos object).
    #
    #     Returns:
    #         Fermi energy dictated by charge neutrality.
    #     """
    #     fdos = FermiDos(bulk_dos, bandgap=self.band_gap)
    #     _, fdos_vbm = fdos.get_cbm_vbm()
    #
    #     def _get_total_q(ef):
    #         qd_tot = sum(
    #             d["charge"] * d["conc"]
    #             for d in self.defect_concentrations(
    #                 chemical_potentials=chemical_potentials,
    #                 temperature=temperature,
    #                 fermi_level=ef,
    #             )
    #         )
    #         qd_tot += fdos.get_doping(fermi_level=ef + fdos_vbm, temperature=temperature)
    #         return qd_tot
    #
    #     return bisect(_get_total_q, -1.0, self.band_gap + 1.0)

    # Doesn't work as .defect_concentration() no longer a DefectEntry method (required in this code),
    # and can;t be done with pmg-analysis-defects, but can with py-sc-fermi ofc.
    # TODO: Worth seeing if this code works properly (agrees with py-sc-fermi), in which case could be
    #  useful to have as an option for quick checking?
    # def solve_for_non_equilibrium_fermi_energy(
    #     self, temperature, quench_temperature, chemical_potentials, bulk_dos
    # ):
    #     """
    #     Solve for the Fermi energy after quenching in the defect concentrations
    #     at a higher temperature (the quench temperature), as outlined in P.
    #     Canepa et al (2017) Chemistry of Materials (doi:
    #     10.1021/acs.chemmater.7b02909).
    #
    #     Args:
    #         temperature: Temperature to equilibrate fermi energy at after quenching in defects
    #         quench_temperature: Temperature to equilibrate defect concentrations at (higher temperature)
    #         chemical_potentials: dict of chemical potentials to use for calculation fermi level
    #         bulk_dos: bulk system dos (pymatgen Dos object)
    #
    #     Returns:
    #         Fermi energy dictated by charge neutrality with respect to frozen in defect concentrations
    #     """
    #     high_temp_fermi_level = self.solve_for_fermi_energy(
    #         quench_temperature, chemical_potentials, bulk_dos
    #     )
    #     fixed_defect_charge = sum(
    #         d["charge"] * d["conc"]
    #         for d in self.defect_concentrations(
    #             chemical_potentials=chemical_potentials,
    #             temperature=quench_temperature,
    #             fermi_level=high_temp_fermi_level,
    #         )
    #     )
    #
    #     fdos = FermiDos(bulk_dos, bandgap=self.band_gap)
    #     _, fdos_vbm = fdos.get_cbm_vbm()
    #
    #     def _get_total_q(ef):
    #         qd_tot = fixed_defect_charge
    #         qd_tot += fdos.get_doping(fermi_level=ef + fdos_vbm, temperature=temperature)
    #         return qd_tot
    #
    #     return bisect(_get_total_q, -1.0, self.band_gap + 1.0)

    def get_dopability_limits(self, chemical_potentials):  # works, somewhat useful tbf. Not in pmg defects
        """
        Find Dopability limits for a given chemical potential. This is defined
        by the defect formation energies which first cross zero in formation
        energies. This determine bounds on the fermi level.

        Does this by computing formation energy for every stable defect with non-zero charge.
        If the formation energy value changes sign on either side of the band gap, then
        compute the fermi level value where the formation energy is zero
        (formation energies are lines and basic algebra shows: x_crossing = x1 - (y1 / q)
        for fermi level, x1, producing formation energy y1)

        Args:
            chemical_potentials: dict of chemical potentials to use for calculation fermi level
        Returns:
             lower dopability limit, upper dopability limit
            (returns None if no limit exists for upper or lower i.e. no negative defect
            crossing before +/- 20 of band edges OR defect formation energies are entirely zero)
        """
        min_fl_range = -20.0
        max_fl_range = self.band_gap + 20.0

        lower_lim = None
        upper_lim = None
        for def_entry in self.all_stable_entries:
            min_fl_formen = self._formation_energy(
                def_entry, chemical_potentials=chemical_potentials, fermi_level=min_fl_range
            )
            max_fl_formen = self._formation_energy(
                def_entry, chemical_potentials=chemical_potentials, fermi_level=max_fl_range
            )

            if min_fl_formen < 0.0 and max_fl_formen < 0.0:
                # logger.error(
                #     f"Formation energy is negative through entire gap for entry {def_entry.name} q={
                #     def_entry.charge}."
                #     " Cannot return dopability limits."
                # )
                return None, None
            if np.sign(min_fl_formen) != np.sign(max_fl_formen):
                x_crossing = min_fl_range - (min_fl_formen / def_entry.charge_state)
                if min_fl_formen < 0.0:
                    if lower_lim is None or lower_lim < x_crossing:
                        lower_lim = x_crossing
                elif upper_lim is None or upper_lim > x_crossing:
                    upper_lim = x_crossing

        return lower_lim, upper_lim

    # TODO: Make a specific tutorial in docs for editing return Matplotlib figures, or with rcParams,
    #  or with a stylesheet
    # TODO: Add option to only plot defect states that are stable at some point in the bandgap
    # TODO: Add option to plot formation energies at the centroid of the chemical stability region? And
    #  make this the default if no chempots are specified? Or better default to plot both the most (
    #  most-electronegative-)anion-rich and the (most-electropositive-)cation-rich chempot limits?
    def plot(
        self,
        chempots: Optional[Dict] = None,
        facets: Optional[Union[List, str]] = None,
        el_refs: Optional[Dict] = None,
        chempot_table: bool = True,
        all_entries: Union[bool, str] = False,
        style_file: Optional[str] = None,
        xlim: Optional[Tuple] = None,
        ylim: Optional[Tuple] = None,
        fermi_level: Optional[float] = None,
        colormap: Union[str, colors.Colormap] = "Dark2",
        auto_labels: bool = False,
        filename: Optional[str] = None,
    ):
        """
        Produce a defect formation energy vs Fermi level plot (a.k.a. a defect
        formation energy / transition level diagram). Returns the Matplotlib
        Figure object to allow further plot customisation.

        Args:
            chempots (dict):
                Dictionary of chemical potentials to use for calculating the defect
                formation energies. This can have the form of
                {"facets": [{'facet': [chempot_dict]}]} (the format generated by
                doped's chemical potential parsing functions (see tutorials)) and
                facet(s) (chemical potential limit(s)) to plot can be chosen using
                `facets`, or a dictionary of **DFT**/absolute chemical potentials
                (not formal chemical potentials!), in the format:
                {element symbol: chemical potential} - if manually specifying
                chemical potentials this way, you can set the el_refs option with
                the DFT reference energies of the elemental phases in order to show
                the formal (relative) chemical potentials above the plot.
                (Default: None)
            facets (list, str):
                A string or list of facet(s) (chemical potential limit(s)) for which
                to plot the defect formation energies, corresponding to 'facet' in
                {"facets": [{'facet': [chempot_dict]}]} (the format generated by
                doped's chemical potential parsing functions (see tutorials)). If
                not specified, will plot for each facet in `chempots`. (Default: None)
            el_refs (dict):
                Dictionary of elemental reference energies for the chemical potentials
                in the format:
                {element symbol: reference energy} (to determine the formal chemical
                potentials, when chempots has been manually specified as
                {element symbol: chemical potential}). Unnecessary if chempots is
                provided in format generated by doped (see tutorials).
                (Default: None)
            chempot_table (bool):
                Whether to print the chemical potential table above the plot.
                (Default: True)
            all_entries (bool, str):
                Whether to plot the formation energy lines of _all_ defect entries,
                rather than the default of showing only the equilibrium states at each
                Fermi level position (traditional). If instead set to "faded", will plot
                the equilibrium states in bold, and all unstable states in faded grey
                (Default: False)
            style_file (str):
                Path to a mplstyle file to use for the plot. If None (default), uses
                the default doped style (from doped/utils/doped.mplstyle).
            xlim:
                Tuple (min,max) giving the range of the x-axis (Fermi level). May want
                to set manually when including transition level labels, to avoid crossing
                the axes. Default is to plot from -0.3 to +0.3 eV above the band gap.
            ylim:
                Tuple (min,max) giving the range for the y-axis (formation energy). May
                want to set manually when including transition level labels, to avoid
                crossing the axes. Default is from 0 to just above the maximum formation
                energy value in the band gap.
            fermi_level (float):
                If set, plots a dashed vertical line at this Fermi level value, typically
                used to indicate the equilibrium Fermi level position (e.g. calculated
                with py-sc-fermi). (Default: None)
            colormap (str, matplotlib.colors.Colormap):
                Colormap to use for the formation energy lines, either as a string (i.e.
                name from https://matplotlib.org/stable/users/explain/colors/colormaps.html)
                or a Colormap / ListedColormap object. (default: "Dark2")
            auto_labels (bool):
                Whether to automatically label the transition levels with their charge
                states. If there are many transition levels, this can be quite ugly.
                (Default: False)
            filename (str): Filename to save the plot to. (Default: None (not saved))

        Returns:
            Matplotlib Figure object, or list of Figure objects if multiple facets
            chosen.
        """
        from shakenbreak.plotting import _install_custom_font

        _install_custom_font()
        # check input options:
        if all_entries not in [False, True, "faded"]:
            raise ValueError(
                f"`all_entries` option must be either False, True, or 'faded', not {all_entries}"
            )

        if (
            chempots
            and facets is None
            and el_refs is None
            and "facets" not in chempots
            and any(np.isclose(chempot, 0, atol=0.1) for chempot in chempots.values())
        ):
            # if any chempot is close to zero, this is likely a formal chemical potential and so inaccurate
            # here (trying to make this as idiotproof as possible to reduce unnecessary user queries...)
            warnings.warn(
                "At least one of your manually-specified chemical potentials is close to zero, "
                "which is likely a _formal_ chemical potential (i.e. relative to the elemental "
                "reference energies), but you have not specified the elemental reference "
                "energies with `el_refs`. This will give large errors in the absolute values "
                "of formation energies, but the transition level positions will be unaffected."
            )

        style_file = style_file or f"{os.path.dirname(__file__)}/utils/doped.mplstyle"
        plt.style.use(style_file)  # enforce style, as style.context currently doesn't work with jupyter
        with plt.style.context(style_file):
            if chempots and "facets" in chempots:
                if facets is None:
                    facets = chempots["facets"].keys()  # Phase diagram facets to use for chemical
                    # potentials, to calculate and plot formation energies
                figs = []
                for facet in facets:
                    dft_chempots = chempots["facets"][facet]
                    el_refs = chempots["elemental_refs"]
                    plot_title = facet
                    plot_filename = (
                        f"{filename.rsplit('.', 1)[0]}_{facet}.{filename.rsplit('.', 1)[1]}"
                        if filename
                        else None
                    )

                    fig = _TLD_plot(
                        self,
                        dft_chempots=dft_chempots,
                        el_refs=el_refs,
                        chempot_table=chempot_table,
                        all_entries=all_entries,
                        xlim=xlim,
                        ylim=ylim,
                        fermi_level=fermi_level,
                        title=plot_title,
                        colormap=colormap,
                        auto_labels=auto_labels,
                        filename=plot_filename,
                    )
                    figs.append(fig)

                return figs[0] if len(figs) == 1 else figs

            # else manually specified chemical potentials, or no chempots specified
            fig = _TLD_plot(
                self,
                dft_chempots=chempots,
                el_refs=el_refs,
                chempot_table=chempot_table,
                all_entries=all_entries,
                xlim=xlim,
                ylim=ylim,
                fermi_level=fermi_level,
                title=None,
                colormap=colormap,
                auto_labels=auto_labels,
                filename=filename,
            )
        return fig
